/**
 * Class as Type and Value
 * - 클래스를 타입으로 사용할 수 있습니다.
 * - 클래스를 값으로 사용할 수 있습니다.
 * - 클래스를 타입으로 사용할 때는, 인스턴스를 생성할 수 없습니다.
 * - 클래스를 값으로 사용할 때는, 인스턴스를 생성할 수 있습니다.
 * - 클래스를 타입으로 사용할 때는, 인스턴스의 속성을 가져올 수 없습니다.
 * - 클래스를 값으로 사용할 때는, 인스턴스의 속성을 가져올 수 있습니다.
 * - 클래스를 타입으로 사용할 때는, 인스턴스의 메서드를 가져올 수 없습니다.
 * - 클래스를 값으로 사용할 때는, 인스턴스의 메서드를 가져올 수 있습니다.
 * - 클래스를 타입으로 사용할 때는, 인스턴스의 생성자를 가져올 수 없습니다.
 * - 클래스를 값으로 사용할 때는, 인스턴스의 생성자를 가져올 수 있습니다.
 * - 클래스를 타입으로 사용할 때는, 인스턴스의 생성자를 호출할 수 없습니다.
 * - 클래스를 값으로 사용할 때는, 인스턴스의 생성자를 호출할 수 있습니다.
 */
class Dog {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  bark() {
    return `${this.name}이(가) 짖습니다.`;
  }
}

// type을 별도로 생성하지 않았지만, Dog 타입으로 사용합니다.
let ori = new Dog("오리"); // ori: Dog 타입으로 사용,
console.log(ori.bark()); // 오리이(가) 짖습니다.

// "오리"는 string 타입이기 때문에, Dog 타입에 대입할 수 없다.
// ori = "오리"; // Error: Type 'string' is not assignable to type 'Dog'.

/**
 * 객체로 선언할 수는 있다.
 */
ori = {
  name: "오리",
  bark() {
    return `${this.name}이(가) 짖습니다.`;
  },
}; // ori: Dog 타입으로 사용
